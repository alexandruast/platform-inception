#!/usr/bin/env sh
### BEGIN INIT INFO
# Provides: {{ item.name }}
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

readonly SERVICE_NAME='{{ item.name }}'
readonly SERVICE_USER='{{ item.user }}'
readonly SERVICE_CMD='{{ item.cmd }}'
readonly SERVICE_LOG='{{ item.log_file }}'

{% for key, value in item.env.iteritems() %}
export {{ key }}="{{ value }}"
{% endfor %}

get_pid() {
  pid=$(pgrep -f -x "$SERVICE_CMD")
  echo $pid
}

start() {
  if [ "x$(get_pid)" = "x" ]; then
    echo "[info] starting $SERVICE_NAME..."
    su $SERVICE_USER -c "nohup $SERVICE_CMD >> $SERVICE_LOG 2>&1 &"
    sleep 0.5
    pid="$(get_pid)"
    if [ "x$pid" != "x" ]; then
      echo "[info] $SERVICE_NAME(PID:$pid) has started"
    else
      echo "[error] $SERVICE_NAME failed to start!"
      echo "[error] check the log file at $SERVICE_LOG"
      exit 1
    fi
  else
    echo "[info] $SERVICE_NAME is already started!"
  fi
}

stop() {
  if [ "x$(get_pid)" != "x" ];then
    pid="$(get_pid)"
    echo "[info] stopping $SERVICE_NAME(PID:$pid)..."
    for i in $(seq 1 10); do
      kill $pid
      sleep 3
      if [ "x$(get_pid)" = "x" ]; then
        echo "[info] $SERVICE_NAME stopped after $i attempts"
        break
      fi
    done
    if [ "x$(get_pid)" != "x" ]; then
      echo "[error] couldn't stop $SERVICE_NAME after $i attempts!"
      exit 1
    fi
  else
    echo "[info] $SERVICE_NAME is already stopped!"
  fi
}

status() {
  if [ "x$(get_pid)" != "x" ]; then
    pid="$(get_pid)"
    echo "[info] $SERVICE_NAME(PID:$pid) is running"
  else
    echo "[info] $SERVICE_NAME is stopped"
  fi
}

if ! which pgrep >/dev/null 2>&1; then
  echo "[error] pgrep tool missing!"
  exit 1
fi

case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  restart)
    stop
    start
    ;;

  status)
    status
    ;;

  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0